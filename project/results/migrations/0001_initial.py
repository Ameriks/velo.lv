# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import easy_thumbnails.fields
from django.conf import settings
import results.models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('team', '0001_initial'),
        ('registration', '0002_auto_20150603_1112'),
        ('djcelery', '__first__'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChipScan',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('nr_text', models.CharField(max_length=20)),
                ('time_text', models.CharField(max_length=20)),
                ('time', models.TimeField(null=True, blank=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('is_blocked', models.BooleanField(default=False)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('nr', models.ForeignKey(blank=True, to='registration.Number', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistanceAdmin',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('zero', models.TimeField(default=b'00:00:00', help_text=b'HH:MM:SS')),
                ('distance_actual', models.IntegerField(null=True, blank=True)),
                ('gpx', models.FileField(null=True, upload_to=results.models._get_gpx_upload_path, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('distance', models.ForeignKey(to='core.Distance')),
            ],
        ),
        migrations.CreateModel(
            name='HelperResults',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified')),
                ('object_id', models.PositiveIntegerField(null=True, blank=True)),
                ('calculated_total', models.FloatField(db_index=True, null=True, blank=True)),
                ('passage_assigned', models.IntegerField(db_index=True, null=True, blank=True)),
                ('is_manual', models.BooleanField(default=False)),
                ('matches_slug', models.SlugField(blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('content_type', models.ForeignKey(blank=True, to='contenttypes.ContentType', null=True)),
                ('created_by', models.ForeignKey(related_name='created_helperresults_set', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='modified_helperresults_set', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('participant', models.ForeignKey(to='registration.Participant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LapResult',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('index', models.IntegerField(default=0, db_index=True)),
                ('time', models.TimeField(null=True, verbose_name='Time', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Leader',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('color', models.CharField(max_length=50, choices=[(b'blue', b'blue'), (b'red', b'red'), (b'green', b'green'), (b'sea', b'sea'), (b'orange', b'orange'), (b'yellow', b'yellow')])),
                ('text', models.CharField(max_length=50)),
                ('image', easy_thumbnails.fields.ThumbnailerImageField(upload_to=results.models._get_upload_path, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='LegacyResult',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('first_name', models.CharField(max_length=60, blank=True)),
                ('last_name', models.CharField(max_length=60, blank=True)),
                ('year', models.IntegerField(null=True, blank=True)),
                ('slug', models.SlugField(blank=True)),
                ('result_distance', models.IntegerField(null=True, blank=True)),
                ('points_distance', models.IntegerField(null=True, blank=True)),
                ('phone_number', models.CharField(max_length=60, blank=True)),
                ('email', models.CharField(max_length=60, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('distance', models.ForeignKey(to='core.Distance')),
                ('participant_2014', models.ForeignKey(blank=True, to='registration.Participant', null=True)),
                ('participant_2014_could_be', models.ForeignKey(related_name='legacyresult_potential_set', blank=True, to='registration.Participant', null=True)),
                ('participant_2014_could_be2', models.ForeignKey(related_name='legacyresult_potential2_set', blank=True, to='registration.Participant', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegacySEBStandingsResult',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('number', models.IntegerField(null=True, blank=True)),
                ('group', models.CharField(max_length=20, blank=True)),
                ('first_name', models.CharField(max_length=60, blank=True)),
                ('last_name', models.CharField(max_length=60, blank=True)),
                ('year', models.IntegerField(null=True, blank=True)),
                ('slug', models.SlugField(blank=True)),
                ('team_name', models.CharField(max_length=100, blank=True)),
                ('velo', models.CharField(max_length=100, blank=True)),
                ('group_points1', models.IntegerField(null=True, blank=True)),
                ('group_points2', models.IntegerField(null=True, blank=True)),
                ('group_points3', models.IntegerField(null=True, blank=True)),
                ('group_points4', models.IntegerField(null=True, blank=True)),
                ('group_points5', models.IntegerField(null=True, blank=True)),
                ('group_points6', models.IntegerField(null=True, blank=True)),
                ('group_points7', models.IntegerField(null=True, blank=True)),
                ('group_total', models.IntegerField(null=True, blank=True)),
                ('group_place', models.IntegerField(null=True, blank=True)),
                ('distance_points1', models.IntegerField(null=True, blank=True)),
                ('distance_points2', models.IntegerField(null=True, blank=True)),
                ('distance_points3', models.IntegerField(null=True, blank=True)),
                ('distance_points4', models.IntegerField(null=True, blank=True)),
                ('distance_points5', models.IntegerField(null=True, blank=True)),
                ('distance_points6', models.IntegerField(null=True, blank=True)),
                ('distance_points7', models.IntegerField(null=True, blank=True)),
                ('distance_total', models.IntegerField(null=True, blank=True)),
                ('distance_place', models.IntegerField(null=True, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('distance', models.ForeignKey(to='core.Distance')),
                ('participant_2014', models.ForeignKey(blank=True, to='registration.Participant', null=True)),
                ('participant_2014_could_be', models.ForeignKey(related_name='legacysebstandingsresult_potential_set', blank=True, to='registration.Participant', null=True)),
                ('participant_2014_could_be2', models.ForeignKey(related_name='legacysebstandingsresult_potential2_set', blank=True, to='registration.Participant', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('time', models.TimeField(null=True, verbose_name='Time', blank=True)),
                ('zero_time', models.TimeField(null=True, verbose_name='Time', blank=True)),
                ('chip_time', models.TimeField(null=True, verbose_name='Time', blank=True)),
                ('avg_speed', models.FloatField(null=True, verbose_name='Average Speed', blank=True)),
                ('result_group', models.IntegerField(null=True, verbose_name='Result Group', blank=True)),
                ('result_distance', models.IntegerField(null=True, verbose_name='Result Distance', blank=True)),
                ('points_group', models.IntegerField(default=0, verbose_name='Points Group')),
                ('points_distance', models.IntegerField(default=0, verbose_name='Points Distance')),
                ('status', models.CharField(blank=True, max_length=20, verbose_name='Status', choices=[(b'DSQ', b'DSQ'), (b'DNS', b'DNS'), (b'DNF', b'DNF')])),
                ('standings_object_id', models.PositiveIntegerField(null=True, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('leader', models.ForeignKey(blank=True, to='results.Leader', null=True)),
                ('number', models.ForeignKey(to='registration.Number')),
                ('participant', models.ForeignKey(to='registration.Participant')),
                ('standings_content_type', models.ForeignKey(blank=True, to='contenttypes.ContentType', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SebStandings',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('participant_slug', models.SlugField(blank=True)),
                ('group_points1', models.IntegerField(null=True, verbose_name=b'1.', blank=True)),
                ('group_points2', models.IntegerField(null=True, verbose_name=b'2.', blank=True)),
                ('group_points3', models.IntegerField(null=True, verbose_name=b'3.', blank=True)),
                ('group_points4', models.IntegerField(null=True, verbose_name=b'4.', blank=True)),
                ('group_points5', models.IntegerField(null=True, verbose_name=b'5.', blank=True)),
                ('group_points6', models.IntegerField(null=True, verbose_name=b'6.', blank=True)),
                ('group_points7', models.IntegerField(null=True, verbose_name=b'7.', blank=True)),
                ('group_total', models.IntegerField(null=True, blank=True)),
                ('group_place', models.IntegerField(null=True, blank=True)),
                ('distance_points1', models.IntegerField(null=True, verbose_name=b'1.', blank=True)),
                ('distance_points2', models.IntegerField(null=True, verbose_name=b'2.', blank=True)),
                ('distance_points3', models.IntegerField(null=True, verbose_name=b'3.', blank=True)),
                ('distance_points4', models.IntegerField(null=True, verbose_name=b'4.', blank=True)),
                ('distance_points5', models.IntegerField(null=True, verbose_name=b'5.', blank=True)),
                ('distance_points6', models.IntegerField(null=True, verbose_name=b'6.', blank=True)),
                ('distance_points7', models.IntegerField(null=True, verbose_name=b'7.', blank=True)),
                ('distance_total', models.IntegerField(null=True, blank=True)),
                ('distance_total_seconds', models.FloatField(null=True, blank=True)),
                ('distance_place', models.IntegerField(null=True, blank=True)),
                ('competition', models.ForeignKey(to='core.Competition')),
                ('distance', models.ForeignKey(to='core.Distance')),
                ('participant', models.ForeignKey(related_name='primary_sebstandings_set', to='registration.Participant')),
            ],
        ),
        migrations.CreateModel(
            name='TeamResultStandings',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('points_total', models.IntegerField(default=0, verbose_name='Points Total', db_index=True)),
                ('points1', models.IntegerField(db_index=True, null=True, verbose_name=b'1.', blank=True)),
                ('points2', models.IntegerField(db_index=True, null=True, verbose_name=b'2.', blank=True)),
                ('points3', models.IntegerField(db_index=True, null=True, verbose_name=b'3.', blank=True)),
                ('points4', models.IntegerField(db_index=True, null=True, verbose_name=b'4.', blank=True)),
                ('points5', models.IntegerField(db_index=True, null=True, verbose_name=b'5.', blank=True)),
                ('points6', models.IntegerField(db_index=True, null=True, verbose_name=b'6.', blank=True)),
                ('points7', models.IntegerField(db_index=True, null=True, verbose_name=b'7.', blank=True)),
                ('team', models.OneToOneField(to='team.Team')),
            ],
        ),
        migrations.CreateModel(
            name='UrlSync',
            fields=[
                ('periodictask_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='djcelery.PeriodicTask')),
                ('url', models.CharField(max_length=255)),
                ('current_line', models.IntegerField(default=0)),
                ('competition', models.ForeignKey(to='core.Competition')),
            ],
            bases=('djcelery.periodictask',),
        ),
        migrations.AddField(
            model_name='lapresult',
            name='result',
            field=models.ForeignKey(to='results.Result'),
        ),
        migrations.AlterUniqueTogether(
            name='result',
            unique_together=set([('competition', 'participant', 'number')]),
        ),
    ]
