// Generated by CoffeeScript 1.9.0
(function() {
  var call_formset_function, formset, pad;

  window.ENV = window.ENV || {};

  this.replaceemail = function(self) {
    $(self).parents(".form-group").removeClass("has-error");
    $(self).parents(".form-group").find('input').val($(self).html());
    return $(self).parent().remove();
  };

  this.getCookie = function(name) {
    var cookie, _i, _len, _ref;
    _ref = document.cookie.split(';');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cookie = _ref[_i];
      if (cookie && name === (cookie.split('='))[0].trim()) {
        return decodeURIComponent(cookie.slice(1 + (cookie.split('='))[0].length));
      }
    }
    return null;
  };

  this.validateSSN = function(value) {
    var checksum, i, _i;
    value = $.trim(value.replace("-", ""));
    if (!value || value.length !== 11) {
      false;
    }
    checksum = 1;
    for (i = _i = 0; _i <= 9; i = ++_i) {
      checksum = checksum - (parseInt(value[i], 10) * parseInt("01060307091005080402".substr(i * 2, 2), 10));
    }
    if (checksum - (Math.floor(checksum / 11) * 11) !== parseInt(value[10], 10)) {
      return false;
    }
    return value;
  };

  this.maskedSSN = function(field) {
    field.mask("999999-99999", {
      completed: function() {
        var value, year;
        value = validateSSN(this.val());
        if (!value) {
          return this.parents(".form-group").addClass("has-error");
        } else {
          this.parents(".form-group").removeClass("has-error");
          year = value[6] === "1" ? "19" : "20";
          return $("input[name$='birthday']", this.parents('form')).val("" + year + (value.substr(4, 2)) + "-" + (value.substr(2, 2)) + "-" + (value.substr(0, 2))).change();
        }
      }
    });
    return false;
  };

  pad = function(val, length, padChar) {
    var numPads;
    if (padChar == null) {
      padChar = '0';
    }
    val += '';
    numPads = length - val.length;
    if (numPads > 0) {
      return new Array(numPads + 1).join(padChar) + val;
    } else {
      return val;
    }
  };

  call_formset_function = function(row, container, type) {
    var field, function_name, _i, _len, _ref;
    _ref = $(container).prop("class").split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      if (field.indexOf('_inline_class') !== -1) {
        function_name = field;
      }
    }
    if (typeof window[function_name + '_' + type] === 'function') {
      return window[function_name + '_' + type](row);
    }
  };

  formset = function(containers) {
    var $container, $items, container, prefix, ret_obj, _i, _len, _results;
    ret_obj = {};
    _results = [];
    for (_i = 0, _len = containers.length; _i < _len; _i++) {
      container = containers[_i];
      prefix = $(container).data("prefix");
      $container = $(container).find(".formset_container");
      $items = $container.find(".item:not(.template)");
      _results.push($items.formset({
        prefix: prefix,
        container: $container,
        addText: '',
        addCssClass: 'btn btn-default glyphicon glyphicon-plus',
        deleteText: '',
        deleteCssClass: 'btn btn-danger glyphicon glyphicon-remove delete',
        upCssClass: 'btn btn-minier icon-arrow-up',
        downCssClass: 'btn btn-minier icon-arrow-down',
        formTemplate: $(container).find(".template"),
        added: function(row) {
          return call_formset_function(row, container, 'added');
        },
        removed: function(row) {
          return call_formset_function(row, container, 'removed');
        }
      }));
    }
    return _results;
  };

  $(function() {
    window.ENV.formsets = formset($('.django-inline-form'));
    $('table th input:checkbox').on('click', function() {
      var checkbox, _i, _len, _ref, _results;
      _ref = $(this).closest('table').find('tr > td:first-child input:checkbox');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkbox = _ref[_i];
        checkbox.checked = this.checked;
        $(checkbox).closest('tr').toggleClass('selected');
        _results.push("");
      }
      return _results;
    });
    return $('.calculate_time_field_btn').on('click', function() {
      var calc_milliseconds, field, final_m, final_m_tmp, hours, input_m, millisecs, minutes, seconds, zero_m;
      field = $(this).parents('.input-group').find('input');
      calc_milliseconds = function(time) {
        var mills, time_array, time_array2;
        time_array = time.split(':');
        mills = 0;
        mills = parseInt(time_array[0]) * 60 * 60 * 1000;
        mills += parseInt(time_array[1]) * 60 * 1000;
        time_array2 = time_array[2].split('.');
        mills += parseInt(time_array2[0]) * 1000;
        if (time_array2[1] !== void 0) {
          mills += parseInt(time_array2[1]);
        }
        return mills;
      };
      zero_m = calc_milliseconds(field.attr('zero_time'));
      input_m = calc_milliseconds(field.val());
      final_m = input_m - zero_m;
      millisecs = final_m % 1000;
      final_m_tmp = (final_m - millisecs) / 1000;
      seconds = final_m_tmp % 60;
      final_m_tmp = (final_m_tmp - seconds) / 60;
      minutes = final_m_tmp % 60;
      hours = (final_m_tmp - minutes) / 60;
      field.val((pad(hours, 2)) + ":" + (pad(minutes, 2)) + ":" + (pad(seconds, 2)) + "." + millisecs);
      return "";
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
