# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-07 14:19
from __future__ import unicode_literals

import json

from django.db import migrations
from django.db import connection
from django.utils import timezone
from allauth.socialaccount.models import SocialAccount, SocialToken
from allauth.account.models import EmailAddress
from sitetree.models import TreeItem


def migrate_to_allauth(apps, schema_editor):
    User = apps.get_model("core", "User")

    cursor = connection.cursor()
    cursor.execute("Select * from social_auth_usersocialauth order by id")

    for row in cursor:
        insert_social_account = {
            "provider": row[2],
            "uid": row[3],
            "last_login": timezone.now(),
            "date_joined": timezone.now(),
            "extra_data": json.loads(row[4]),
            "user_id": row[1]
        }

        account = SocialAccount.objects.create(**insert_social_account)

        print(account.extra_data)
        insert_social_token = {
            "account_id": account.id
        }
        if account.provider == 'facebook':
            insert_social_token.update({"token": account.extra_data.get('access_token'), "app_id": 1})
        elif account.provider == 'twitter':
            insert_social_token.update({
                "token": account.extra_data.get('access_token', {}).get('oauth_token'),
                "token_secret": account.extra_data.get('access_token', {}).get('oauth_token_secret'),
                "app_id": 2,
            })
        elif account.provider == 'draugiem':
            insert_social_token.update({"token": account.extra_data.get('apikey'), "app_id": 3})

        if not insert_social_token.get('token'):
            account.delete()
            continue

        SocialToken.objects.create(**insert_social_token)

    for user in User.objects.order_by('id'):
        EmailAddress.objects.create(email=user.email, verified=True, primary=True, user_id=user.id)

    cursor.execute("DROP TABLE social_auth_usersocialauth")
    cursor.execute("DROP TABLE social_auth_association")
    cursor.execute("DROP TABLE social_auth_code")
    cursor.execute("DROP TABLE social_auth_nonce")

    cursor.execute("DROP TABLE django_auth_policy_loginattempt")
    cursor.execute("DROP TABLE django_auth_policy_passwordchange")
    cursor.execute("DROP TABLE django_auth_policy_userchange")

    cursor.execute("TRUNCATE django_admin_log")
    cursor.execute("TRUNCATE core_failedtask")

    cursor.execute("INSERT into socialaccount_socialapp_sites VALUES (1, 1, 1)")
    cursor.execute("INSERT into socialaccount_socialapp_sites VALUES (2, 2, 1)")
    cursor.execute("INSERT into socialaccount_socialapp_sites VALUES (3, 3, 1)")

    TreeItem.objects.get(id=54).delete()
    TreeItem.objects.get(id=59).delete()

    prof = TreeItem.objects.get(id=52)
    prof.inmenu = False
    prof.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_competition_frontpage_ordering'),
    ]

    operations = [
        migrations.RunPython(migrate_to_allauth),
    ]
